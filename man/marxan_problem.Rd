% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marxan_problem.R
\name{marxan_problem}
\alias{marxan_problem}
\alias{marxan_problem.default}
\alias{marxan_problem.data.frame}
\alias{marxan_problem.character}
\title{\emph{Marxan} conservation problem}
\usage{
marxan_problem(x, ...)

\method{marxan_problem}{default}(x, ...)

\method{marxan_problem}{data.frame}(x, spec, puvspr, bound = NULL,
  blm = 0, ...)

\method{marxan_problem}{character}(x, ...)
}
\arguments{
\item{x}{\code{character} file path for a \emph{Marxan} input file (typically
  called \code{"input.dat"}), or \code{data.frame} containing planning unit
  data (typically called \code{"pu.dat"}). If the argument to \code{x} is a
  \code{data.frame}, then each row corresponds to a different planning unit,
  and it must have the following columns:

  \describe{

  \item{\code{"id"}}{\code{integer} unique identifier for each planning unit.
    These identifiers are used in the argument to \code{puvspr}.}

  \item{\code{"cost"}}{\code{numeric} cost of each planning unit.}

  \item{\code{"status"}}{\code{integer} indicating if each planning unit
    should not be locked in the solution (0) or if it should be locked in
    (2) or locked out (3) of the solution. Although \emph{Marxan} allows
    planning units to be selected in the initial solution (using values of
    1), these values have no effect here. This column is optional.}

  }}

\item{...}{not used.}

\item{spec}{\code{data.frame} containing information on the features.
  The argument to \code{spec} must follow the conventions used by
  \emph{Marxan} for the species data file (conventionally called
  \code{"spec.dat"}). Each row corresponds to a different feature and
  each column corresponds to different information about the features. It
  must contain the columns listed below. Note that the argument to
  \code{spec} must contain at least one column named \code{"prop"} or
  \code{"amount"}---\strong{but not both columns with both of these
  names}---to specify the target for each feature.

  \describe{

  \item{\code{"id"}}{\code{integer} unique identifier for each feature
    These identifiers are used in the argument to \code{puvspr}.}

  \item{\code{"name"}}{\code{character} name for each feature.}

  \item{\code{"prop"}}{\code{numeric} relative target for each feature
    (optional).}'

  \item{\code{"amount"}}{\code{numeric} absolute target for each
    feature (optional).}

  }}

\item{puvspr}{\code{data.frame} containing information on the amount of
  each feature in each planning unit. The argument to
  \code{puvspr} must follow the conventions used in the \emph{Marxan} input
  data file (conventionally called \code{"puvspr.dat"}). It must contain the
  following columns:

  \describe{

  \item{\code{"pu"}}{\code{integer} planning unit identifier.}

  \item{\code{"species"}}{\code{integer} feature identifier.}

  \item{\code{"amount"}}{\code{numeric} amount of the feature in the
       planning unit.}

  }}

\item{bound}{\code{NULL} object indicating that no boundary data
  is required for the conservation planning problem, or a \code{data.frame}
  containing information on the planning units' boundaries. The argument to
  \code{bound} must follow the conventions used in the \emph{Marxan} input
  data file (conventionally called \code{"bound.dat"}). It must contain the
  following columns:

  \describe{

  \item{\code{"id1"}}{\code{integer} planning unit identifier.}

  \item{\code{"id2"}}{\code{integer} planning unit identifier.}

  \item{\code{"boundary"}}{\code{numeric} length of shared boundary
    between the planning units identified in the previous two columns.}

  }}

\item{blm}{\code{numeric} boundary length modifier. This argument only
has an effect when argument to \code{x} is a \code{data.frame}. The
default argument is zero.}
}
\value{
\code{\link{ConservationProblem-class}} object.
}
\description{
Create a conservation planning \code{\link{problem}} following the
mathematical formulations used in \emph{Marxan} (detailed in Beyer
\emph{et al.} 2016).
}
\details{
This function is provided as a convenient wrapper for solving
  \emph{Marxan} problems using \pkg{prioritizr}. Although this function
  could accommodate asymmetric connectivity in earlier versions of the
  \pkg{prioritizr} package, this functionality is no longer available.
  Please see the \code{\link{add_connectivity_penalties}} function for
  adding asymmetric connectivity penalties to a conservation planning
  problem. For more information on the correct formats
  for \emph{Marxan} input data, see the
  \href{http://marxan.net}{official \emph{Marxan} website} and Ball
  \emph{et al.} (2009).
}
\examples{
# create Marxan problem using Marxan input file
input_file <- system.file("extdata/input.dat", package = "prioritizr")
p1 <- marxan_problem(input_file)
\donttest{
# solve problem
s1 <- solve(p1)

# print solution
head(s1)
}
# create Marxan problem using data.frames that have been loaded into R
## load in planning unit data
pu_path <- system.file("extdata/input/pu.dat", package = "prioritizr")
pu_dat <- data.table::fread(pu_path, data.table = FALSE)
head(pu_dat)

## load in feature data
spec_path <- system.file("extdata/input/spec.dat", package = "prioritizr")
spec_dat <- data.table::fread(spec_path, data.table = FALSE)
head(spec_dat)

## load in planning unit vs feature data
puvspr_path <- system.file("extdata/input/puvspr.dat",
                           package = "prioritizr")
puvspr_dat <- data.table::fread(puvspr_path, data.table = FALSE)
head(puvspr_dat)

## load in the boundary data
bound_path <- system.file("extdata/input/bound.dat", package = "prioritizr")
bound_dat <- data.table::fread(bound_path, data.table = FALSE)
head(bound_dat)

# create problem without the boundary data
p2 <- marxan_problem(pu_dat, spec_dat, puvspr_dat)
\donttest{
# solve problem
s2 <- solve(p2)

# print solution
head(s2)
}
# create problem with the boundary data and a boundary length modifier
# set to 5
p3 <- marxan_problem(pu_dat, spec_dat, puvspr_dat, bound_dat, 5)
\donttest{
# solve problem
s3 <- solve(p3)

# print solution
head(s3)
}
}
\references{
Ball IR, Possingham HP, and Watts M (2009) \emph{Marxan and relatives:
Software for spatial conservation prioritisation} in Spatial conservation
prioritisation: Quantitative methods and computational tools. Eds Moilanen
A, Wilson KA, and Possingham HP. Oxford University Press, Oxford, UK.

Beyer HL, Dujardin Y, Watts ME, and Possingham HP (2016) Solving
conservation planning problems with integer linear programming.
\emph{Ecological Modelling}, 228: 14--22.
}
